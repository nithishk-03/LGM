# -*- coding: utf-8 -*-
"""Next word prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S3O65LGWcYcrfItGKVbog5qBk-XRtMNk
"""

import numpy as np
from nltk.tokenize import RegexpTokenizer
from keras.models import Sequential, load_model
from keras.layers import LSTM, Dense, Activation
from keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import pickle
import heapq

path='/content/next word.txt'
text=open(path).read().lower()
print('size of text:',len(text))

tokenizer=RegexpTokenizer(r"\w+")
words=tokenizer.tokenize(text)

unique_words = np.unique(words)

unique_word_index ={}
for index,word in enumerate(unique_words):
  unique_word_index[word]=index

word_len = 5
prev_words = []
next_words = []

for i in range(len(words)-word_len):
  prev_words.append(words[i:i+word_len])
  next_words.append(words[i+word_len])
print(prev_words[1])
print(next_words[1])

X = np.zeros((len(prev_words), word_len, len(unique_words)), dtype=bool)
Y = np.zeros((len(next_words), len(unique_words)), dtype=bool)
for i, each_words in enumerate(prev_words):
    for j, each_word in enumerate(each_words):
        X[i, j, unique_word_index[each_word]] = 1
    Y[i, unique_word_index[next_words[i]]] = 1

print(X[0][0])

model = Sequential()
model.add(LSTM(128, input_shape=(word_len, len(unique_words))))
model.add(Dense(len(unique_words)))
model.add(Activation('softmax'))

optimizer = RMSprop(learning_rate=0.01) # Use learning_rate instead of lr
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])
history = model.fit(X, Y, validation_split=0.05, batch_size=128, epochs=30, shuffle=True).history

model.save('keras_next_word_model.h5')
pickle.dump(history, open("history.p", "wb"))
model = load_model('keras_next_word_model.h5')
history = pickle.load(open("history.p", "rb"))

plt.plot(history['accuracy'])
plt.plot(history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')

plt.plot(history['loss'])
plt.plot(history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')

def prepare_input(text):
    x = np.zeros((1, word_len, len(unique_words)))
    for t, word in enumerate(text.split()):
        print(word)

prepare_input("This is an example of input for our LSTM".lower())

def prepare_input(text, sequence_length=5):
    x = np.zeros((1, sequence_length, len(unique_words)))
    words = text.split()
    for t, word in enumerate(words[-sequence_length:]):
        if word in unique_word_index:
            x[0, t, unique_word_index[word]] = 1.0
    return x

prepare_input("It is not a lack".lower())

def sample(preds, n=3):
    preds = np.asarray(preds).astype('float64')
    preds = np.exp(preds)
    preds = preds / np.sum(preds)  # Normalizing
    return np.random.choice(len(preds), n, p=preds)

def predict_completions(text, n=3):
    x = prepare_input(text)
    preds = model.predict(x, verbose=0)[0]
    next_indices = sample(preds, n)
    next_words = [unique_words[idx] for idx in next_indices]
    return next_words

def predict_completions(text, n=3):
    x = prepare_input(text)
    preds = model.predict(x, verbose=0)[0]
    next_indices = sample(preds, n)
    next_words = [unique_words[idx] for idx in next_indices]
    return next_words

inuput = [
    "It is not a lack of love, but a lack of friendship that makes unhappy marriages.",
    "That which does not kill us makes us stronger.",
    "I'm not upset that you lied to me, I'm upset that from now on I can't believe you.",
    "And those who were seen dancing were thought to be insane by those who could not hear the music.",
    "It is hard enough to remember my opinions, without also remembering my reasons for them!"
]

for sentence in inuput:
    seq = sentence.lower()
    print(seq)
    print(predict_completions(seq, 5))
    print()

